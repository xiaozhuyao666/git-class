配置：
	name:
		git config --global usr.name "daizhenghui"
	email
		git config --global usr.email "483166658@qq.com"
使用git:
	git status
		-查看当前仓库的状态
	git init
		-初始化仓库
	刚刚添加到项目中的文件处于未跟踪状态：
		未跟踪 ---> 暂存
		git add <filename> 将文件切换到暂存状态
		git add *    将所有的未跟踪的文件都切换到暂存状态
		暂存 ---> 未修改
		git commit -m "修改/添加注释"   描述提交的代码功能
		git commit -a -m ""      提交所有已修改的文件（未跟踪的文件不会提交）
		未修改 ---> 修改
			修改代码后，文件会自动变为修改状态
常用的命令：
	1.重置文件
		git restore <filename> 恢复文件（把已修改为提交的文件恢复到之前未修改时的状态）
		git restore *  把所有（不包括未跟踪的文件）已修改为提交的文件恢复到之前未修改时的状态
		git restore --staged <filename> 取消暂存状态（从暂存状态取消掉）
	2.删除文件
		git rm <filename>	删除文件
		git rm <filename> -f 强制删除文件（对于已修改为提交的文件无法使用上面的删除命令可以加个-f表示强制删除）
	3.移动文件
		git mv (from) (to)  移动文件 / 重命名文件
分支：
	git在存储文件时，而一次代码提交都会创建一个与之对应的节点，git就是通过一个一个的节点来记录当前代码的状态。节点会构成一个树状结构，树状结构就意味着这个树会存在分支，
默认情况下仓库只有一个分支，命名为master。在使用git时，可以创建多个分支，分支与分支之间相互独立，在一个分支上修改代码不会影响其他的分支。
	git log 查看提交日志
	git branch 查看分支
	git branch <branch name> 创建一个新的分支
	git branch -d <branch name> 删除分支
	git switch <branch name> 切换分支
	git switch -c <branch name> 创建一个分支，并直接切换到新的分支
	git merge <branch name>  合并分支
	在开发中，都是在自己的分支上编写代码，代码编写完成后，再将自己的分支合并到主分支中。
	提示信息：Fast-forward 快速合并，不用考虑再次提交。
变基：（rebase)
	在开发中除了通过merge来合并分支外，还可以通过变基来完成分支合并。
	我们通过merge合并分支时，在提交记录中会将所有的分支创建和分支合并的过程全部都显示出来，当项目比较复杂，开发过程比较波折时，必须要反复的创建、合并、删除分支，这样一
	来将会使得代码的提交记录变得极为复杂
	原理（变基时发生了什么）：
		1.当我们发起变基时，git会首先找到两条分支的共同祖先；
		2.对比当前分支相对于祖先的历史提交，并且将它们提取出来存储到一个临时文件中；
		3.将当前部分指向目标的基底；
		4.以当前基底开始，重新执行历史操作。、
	变基和merge对于合并分支来说最终的结果是一样的，但是变基会使得代码的提交记录更整洁、更清晰。但是大部分情况下merge和变基是可以互换的，但是如果分支已经提交到了远程仓库，
那么这时尽量不要使用变基。
远程仓库： （remote）
	远程的git仓库和本地的本质上没有什么区别，不同点在于远程的仓库可以被多人同时访问使用，方便我们协同开发。在实际工作中，git的服务器通常由公司搭建内部使用或者购买一些公共
的私有git服务器，在学习阶段，直接使用一些公共的git仓库。目前常用的库有两个：Github，Gitee（码云）。
	将本地库上传到github：
		git remote add origin https://github.com/xiaozhuyao666/git-demo.git  #git renote add <remote name>（远程库的名字） (url)
		git branch -M main	#修改分支的名字为main
		git push -u origin main  #git push 将代码上传到服务器
	将本地库上传到gitee：
		cd existing_git_repo
		git remote add origin https://gitee.com/dai-zhenghui/git-demo.git
		git push -u origin "master"
		
		